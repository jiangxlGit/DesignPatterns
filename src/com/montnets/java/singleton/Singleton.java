package com.montnets.java.singleton;

/**
 * 
 * @功能概要： 单例模式，单例模式一般分为二种：懒汉模式和饿汉模式<br>
 * @项目名称： 设计模式<br>
 * @初创作者： jiangxl  email：836200494@qq.com <br>
 * @公司名称： ShenZhen Montnets Technology CO.,LTD.<br>
 * @创建时间： 2017-3-8 上午9:48:56<br>
 */
// 懒汉模式，考虑到并发安全问题，使用了双重检测和锁
public class Singleton {
	private static Singleton singleton = null;
	private Singleton(){}
	public static Singleton getInstance(){
		if (singleton == null) {
			synchronized (Singleton.class) {
				if (singleton == null) {
					singleton = new Singleton();
				}
			}
		}
		return singleton;
	}
}

// 饿汉模式是在定义singleton时就new出实例，这里就不赘述了

/**
 * 单例模式的应用场景：
 * 1. 应用程序的日志应用，一般都何用单例模式实现，这一般是由于共享的日志
 *    文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。
 * 2. Web应用的配置对象的读取，一般也应用单例模式，这个是由于配置文件是
 *    共享的资源。
 * 3. 数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库
 * 	   资源。数据库软件系统中使用数据库连接池，主要是节省打开或者关闭数据
 * 	   库连接所引起的效率损耗，这种效率上的损耗还是非常昂贵的，因为何用单
 * 	   例模式来维护，就可以大大降低这种损耗。
 * 4. 多线程的线程池的设计一般也是采用单例模式，这是由于线程池要方便对池
 * 	   中的线程进行控制。
 * 
 * 单例模式的优缺点：
 * 主要优点：
 * 1、提供了对唯一实例的受控访问。
 * 2、由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要
 *    频繁创建和销毁的对象单例模式无疑可以提高系统的性能。
 * 3、允许可变数目的实例。
 
 * 主要缺点：
 * 1、由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。
 * 2、单例类的职责过重，在一定程度上违背了“单一职责原则”。
 * 3、滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为
 *    的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果
 *    实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象
 *    状态的丢失。
 */




















